#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rtc-test-sender:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

app.io = require("socket.io")(server, {
  cors: {
    origin: '*',
  }
});

app.io.attach(server);

rooms={};

app.io.on("connection", (socket) => {
  socket.on("enterRoom",(room, isHost)=>{
    socket.join(room);
    let enter = true;
    let message = "입장하였습니다."
    if(!rooms[room] && isHost) {
      rooms[room] = {
        id: room,
        candidates: [ socket.id ]
      };
      console.log("joined new room", rooms)
    } else {
      if(!rooms[room]) {
        enter=false;
        message="방을 찾을 수 없습니다."
      } else if(isHost) {
        enter=false;
        message="방을 생성할 수 없습니다."
      } 
      else {
        if(rooms[room].candidates.length < 2){
          rooms[room].candidates.push(socket.id);
          socket.to(room).emit("joined");;
          console.log("joined existing room", rooms);
        } else {
          enter=false;
          message="정원이 찬 방입니다."
          console.log('room is full')
        }
      }
    }
    socket.emit("joinResult",enter, message);
  });

  socket.on("caller-to-server", (data) => {
    if(data && data.room && data.signalData && Number.isInteger(data.idx)) {
      if(data.signalData.type === "offer") {
        socket.to(data.room).emit("offer-to-callee", { signalData: data.signalData, idx: data.idx, connections: data.connections });
      } else {
        socket.to(data.room).emit("candidate-to-callee", { signalData: data.signalData, idx: data.idx });
      }
    }
  });

  socket.on("callee-to-server", data => {
    console.log("callee-to-server", data.signalData);
    if(data && data.room && data.signalData && Number.isInteger(data.idx)) {
      socket.to(data.room).emit("signal-to-caller", { signalData: data.signalData, idx: data.idx });
    }
  });

  socket.on("connections-adjusted", (room, connections) => socket.to(room).emit("adjust-connections",connections));

  socket.on("close",(room,id)=>socket.to(room).emit("close",id));

  socket.on("leaveRoom",(room)=>{
    socket.to(room).emit("end");
    socket.disconnect();
    console.log("leave room");
  });
});

app.io.of("/").adapter.on("leave-room", (room, id) => {
  if(rooms[room] && rooms[room].candidates) {
    rooms[room].candidates = rooms[room].candidates.filter(e => e!==id);
    console.log("leaving room",rooms, id, room)
    if(rooms[room].candidates.length == 0) {
      console.log("destroy empty room")
      delete rooms[room];
    }
  }
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

